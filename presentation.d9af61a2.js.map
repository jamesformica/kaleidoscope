{"version":3,"sources":["presentation.js"],"names":["rad","deg","Math","PI","random","min","max","floor","RADIUS","SLICE_ANGLE","SLICE_OPPOSITE_ANGLE","SLICE_HEIGHT","sin","patternCanvas","document","getElementById","patternCtx","getContext","width","height","invPatternCanvas","invPatternCtx","kCanvas","kCtx","img","Image","src","onload","drawWedge","x","y","save","beginPath","moveTo","circlStart","circleStop","arc","clip","drawImage","restore","drawInverseWedge","translate","scale","drawWheel","i","rotate","clearCanvases","clearRect","selectPoint","imgWidth","imgHeight","top","left","right","bottom","kaleidoscopeGo","point","loop","distanceX","distanceY","length","sqrt","round","window","requestAnimationFrame"],"mappings":"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","file":"presentation.d9af61a2.js","sourceRoot":"..","sourcesContent":["/** PHASE 1 - Setup **/\n\n\n\n/**\n * I like working in degrees. 0 - 360. It's nice and human. Canvas likes\n * working in radians. Whatever the f*** they are. This converts degress\n * to radians using math found on stack overflow #noshame\n */\nconst rad = (deg) => deg * Math.PI / 180\n\n\n\n/**\n * This function will come in handy later when we want to pick random points\n * on an image. It returns a whole number between the min and max provided\n */\nconst random = (min, max) => Math.floor(Math.random() * (max - min) + min)\n\n\n\n// This will be the radius of our kaleidoscope. Meaning the diameter will be double this #quickmaths\nconst RADIUS = 300\n\n\n\n// Think of this as the \"size of pacman's mouth\"\nconst SLICE_ANGLE = 30\n\n\n\n// Essentially we need to know the height of \"pacman's mouth\" (see dia. 1)\nconst SLICE_OPPOSITE_ANGLE = (180 - SLICE_ANGLE) / 2\nconst SLICE_HEIGHT = RADIUS / (2 * Math.sin(rad(SLICE_OPPOSITE_ANGLE)))\n\n\n\n/**\n * This preps each of the canvases we are going to use. All up there are 3\n * canvases. The first draws a wedge, the second inverts that wedge, and the third\n * draws and animates the full kaleidoscope\n */\n\n// canvas 1 - wedge pattern - size of the area around pacman's mouth\nconst patternCanvas = document.getElementById('pattern')\nconst patternCtx = patternCanvas.getContext('2d')\npatternCanvas.width = RADIUS\npatternCanvas.height = SLICE_HEIGHT\n\n// canvas 2 - inverted wedge pattern - size of the above canvas\nconst invPatternCanvas = document.getElementById('invPattern')\nconst invPatternCtx = invPatternCanvas.getContext('2d')\ninvPatternCanvas.width = patternCanvas.width\ninvPatternCanvas.height = patternCanvas.height\n\n// canvas 3 - kaleidoscope - size of full circle\nconst kCanvas = document.getElementById('kaleidoscope')\nconst kCtx = kCanvas.getContext('2d')\nkCanvas.width = RADIUS * 2\nkCanvas.height = RADIUS * 2\n\n\n\n/** PHASE 2 - Loading the image **/\n\n\n\n/**\n * This second simply loads the image into memory then calls a function\n * once it's ready to go\n */\nconst img = new Image()\nimg.src = document.getElementById('image').src\nimg.onload = () => {\n  // drawWedge(500, 500, img)\n  // drawInverseWedge()\n  // drawWheel()\n  // kaleidoscopeGo(img)\n}\n\n\n\n/** PHASE 3 - Drawing a wedge **/\n\n\n\n/**\n * Okay, this is the first tricky bit. We are essentially drawing a section of\n * a circle, then filling it in with the image. Think of this section as filling in \n * pacman's mouth. See dia. 2 for a visual representation of what we are doing here.\n * The red line is the shape we are drawing, the blue box is the canvas we are drawing\n * on, and the circle is the size of the circle we are drawing.\n */\nconst drawWedge = (x, y, img) => {\n  patternCtx.save()\n\n  patternCtx.beginPath()\n  patternCtx.moveTo(0, SLICE_HEIGHT / 2)\n\n  const circlStart = rad(SLICE_ANGLE / -2)\n  const circleStop = rad(SLICE_ANGLE / 2)\n  patternCtx.arc(0, SLICE_HEIGHT / 2, RADIUS, circlStart, circleStop)\n\n  // clip the current shape so the image fills inside it\n  patternCtx.clip()\n  // fill it with whatever is in the image at that x and y coord\n  patternCtx.drawImage(img, x, y, RADIUS, SLICE_HEIGHT, 0, 0, RADIUS, SLICE_HEIGHT)\n\n  patternCtx.restore()\n}\n\n\n\n/** PHASE 4 - Drawing an inverted wedge **/\n\n\n\n/**\n * When we draw the kaleidoscope, each alternative slice of the circle is an\n * inverted version. We'll use a second canvas to invert the wedge we just drew\n */\nconst drawInverseWedge = () => {\n  invPatternCtx.save()\n  invPatternCtx.translate(0, SLICE_HEIGHT)        // go to bottom left corner\n  invPatternCtx.scale(1, -1)                      // flip the canvas vertically\n  invPatternCtx.drawImage(patternCanvas, 0, 0);   // draw the pattern canvas\n  invPatternCtx.restore()\n}\n\n\n\n/** PHASE 5 - Drawing the full wheel **/\n\n\n\n/**\n * With both the normal and inverted wedge drawn we can now fill in the full circle.\n * We go to the middle of the circle, then rotate, draw the normal wedge, rotate again,\n * draw the inverted wedge, and so on until the circle is full. See dia. 3\n */\nconst drawWheel = () => {\n  kCtx.save()\n  kCtx.translate(RADIUS, RADIUS) // go to middle\n\n  for (let i = 0; i <= 360 / SLICE_ANGLE; i += 1) {\n    kCtx.rotate(rad(SLICE_ANGLE))\n    kCtx.drawImage(i % 2 ? patternCanvas : invPatternCanvas, 0, SLICE_HEIGHT / -2)\n  }\n\n  kCtx.restore()\n}\n\n\n\n/** PHASE 6 - Animation helpers **/\n\n\n\n/* Before each loop we need to wipe clean the canvases and start fresh */\nconst clearCanvases = () => {\n  patternCtx.clearRect(0, 0, patternCanvas.width, patternCanvas.height)\n  invPatternCtx.clearRect(0, 0, invPatternCanvas.width, invPatternCanvas.height)\n  kCtx.clearRect(0, 0, kCanvas.width, kCanvas.height)\n}\n\n/* \n * We'll be selecting random points to traverse the image. This ensures we pick\n * sections within the bounds of the image. See dia. 4\n */\nconst selectPoint = (imgWidth, imgHeight) => {\n  const top = 0\n  const left = 0\n  const right = imgWidth - RADIUS\n  const bottom = imgHeight - SLICE_HEIGHT\n\n  return { x: random(left, right), y: random(top, bottom) }\n}\n\n\n\n/** PHASE 7 - Animation loop **/\n\n\n\n/**\n * This is it folks. Here we pick a point and incrementally move towards it\n * each loop. Once we arrive we simply pick a new point and off we go again.\n * See dia. 5 for a visual representation of what is happening\n */\nconst kaleidoscopeGo = img => {\n  let point = selectPoint(img.width, img.height)    // pick a random point to head towards\n  let x = img.width / 2                             // always start in the center of the image\n  let y = img.height / 2\n\n  const loop = () => {\n    clearCanvases()                                 // wipe clean the canvases\n    drawWedge(x, y, img)                            // draw the normal wedge\n    drawInverseWedge()                              // draw the inverted wedge\n    drawWheel()                                     // draw the full circle\n\n    const distanceX =  point.x - x                  // figure out how far away we are from\n    const distanceY =  point.y - y                  // the target point\n\n    if (distanceX === 0 && distanceY === 0) {\n      point = selectPoint(img.width, img.height)    // if we're at the target, pick a new point\n    } else {\n      const length = Math.sqrt((distanceY * distanceY) + (distanceX * distanceX))\n      x = Math.round(x + distanceX / length)        // options: -1, 0, 1 in x direction\n      y = Math.round(y + distanceY / length)        // options: -1, 0, 1 in y direction\n    }\n\n    window.requestAnimationFrame(loop)              // trigger the loop again\n  }\n\n  window.requestAnimationFrame(loop)\n}\n"]}