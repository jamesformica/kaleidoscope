{"version":3,"sources":["index.js"],"names":["runState","speed","POINTS","RADIUS","SLICE","SLICE_HEIGHT","Math","abs","sin","PI","kCanvas","document","getElementById","kCtx","getContext","patternCanvas","patternCtx","width","height","invPatternCanvas","invPatternCtx","clearCanvas","canvas","ctx","clearRect","clearCanvases","drawWedge","x","y","img","degree","d2","save","beginPath","moveTo","arc","lineTo","clip","drawImage","restore","drawInverseWedge","translate","scale","drawWheel","i","rotate","random","min","max","floor","selectPoints","imgWidth","imgHeight","top","right","bottom","points","push","nextPoint","current","destination","pointCounter","kaleidoscopeGo","destinationPoint","window","requestAnimationFrame","loop","distanceX","distanceY","selectImage","e","Image","onload","src","target","options","getElementsByClassName","length","onclick","click"],"mappings":"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","file":"kaleidoscope.d289e12e.js","sourceRoot":"..","sourcesContent":["let runState = false\nlet speed = 0.5\n\nconst POINTS = 10\nconst RADIUS = 300\nconst SLICE = 30\nconst SLICE_HEIGHT = Math.abs(Math.sin(30 * Math.PI / 180) * RADIUS) + 10\n\nconst kCanvas = document.getElementById('kaleidoscope')\nconst kCtx = kCanvas.getContext('2d')\n\nconst patternCanvas = document.getElementById('pattern')\nconst patternCtx = patternCanvas.getContext('2d')\npatternCanvas.width = RADIUS\npatternCanvas.height = SLICE_HEIGHT\n\nconst invPatternCanvas = document.getElementById('invPattern')\nconst invPatternCtx = invPatternCanvas.getContext('2d')\ninvPatternCanvas.width = RADIUS\ninvPatternCanvas.height = SLICE_HEIGHT\n\nconst clearCanvas = (canvas, ctx) => {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n}\n\nconst clearCanvases = () => {\n  clearCanvas(patternCanvas, patternCtx);\n  clearCanvas(invPatternCanvas, invPatternCtx);\n  clearCanvas(kCanvas, kCtx);\n}\n\nconst drawWedge = (x, y, img) => {\n  let degree = 345;\n  const d1 = degree - 0.5\n  const d2 = degree + SLICE + 0.2 // remove white seams\n\n  patternCtx.save()\n\n  // draw cheese wedge\n  patternCtx.beginPath();\n  patternCtx.moveTo(0, SLICE_HEIGHT / 2);\n  patternCtx.arc(0, SLICE_HEIGHT / 2, RADIUS, (360 - d2) * Math.PI / 180, (360 - d1) * Math.PI / 180);\n  patternCtx.lineTo(0, SLICE_HEIGHT / 2);\n\n  // crop image section into wedge\n  patternCtx.clip();\n  patternCtx.drawImage(img, x, y, RADIUS, SLICE_HEIGHT, 0, 0, RADIUS, SLICE_HEIGHT)\n  patternCtx.restore()\n}\n\nconst drawInverseWedge = () => {\n  invPatternCtx.save()\n  invPatternCtx.translate(0, SLICE_HEIGHT)\n  invPatternCtx.scale(1, -1);\n  invPatternCtx.drawImage(patternCanvas, 0, 0);\n  invPatternCtx.restore()\n}\n\nconst drawWheel = () => {\n  kCtx.save()\n  kCtx.translate(RADIUS, RADIUS)\n\n  for (let i = 0; i <= 360 / SLICE; i += 1) {\n    kCtx.rotate(SLICE * Math.PI / 180);\n    kCtx.drawImage(i % 2 ? patternCanvas : invPatternCanvas, 0, SLICE_HEIGHT / -2);\n  }\n\n  kCtx.restore()\n}\n\nconst random = (min, max) => Math.floor(Math.random() * (max - min) + min)\n\nconst selectPoints = (imgWidth, imgHeight) => {\n  const top = SLICE_HEIGHT\n  const left = 0\n  const right = imgWidth - RADIUS\n  const bottom = imgHeight - SLICE_HEIGHT\n\n  const points = []\n\n  for (let i = 0; i < POINTS; i += 1) {\n    points.push({ x: random(left, right), y: random(top, bottom) })\n  }\n\n  return points\n}\n\nconst nextPoint = (current, destination) => {\n  if (current === destination) return 0\n  if (current > destination) return -1 * speed\n  return speed\n}\n\nlet pointCounter = 1\nlet x = -1\nlet y = -1\n\nconst kaleidoscopeGo = img => {\n  const points = selectPoints(img.width, img.height)\n\n  x = points[0].x\n  y = points[0].y\n\n  let destinationPoint = points[1]\n\n  const loop = () => {\n    clearCanvases()\n    drawWedge(x, y, img)\n    drawInverseWedge()\n    drawWheel()\n\n    const distanceX = Math.abs(x - destinationPoint.x)\n    const distanceY = Math.abs(y - destinationPoint.y)\n\n    if (distanceX === 0 && distanceY === 0) {\n      pointCounter = (pointCounter + 1) % POINTS\n      destinationPoint = points[pointCounter]\n    } else if (distanceX === distanceY) {\n      x += nextPoint(x, destinationPoint.x)\n      y += nextPoint(y, destinationPoint.y)\n    } else if (distanceX > distanceY) {\n      x += nextPoint(x, destinationPoint.x)\n    } else {\n      y += nextPoint(y, destinationPoint.y)\n    }\n\n    if (runState) {\n      window.requestAnimationFrame(loop)\n    }\n  }\n\n  runState = true;\n  window.requestAnimationFrame(loop)\n}\n\nconst selectImage = (e) => {\n  runState = false;\n\n  window.requestAnimationFrame(() => {\n    const img = new Image();\n    img.onload = () => kaleidoscopeGo(img)\n    img.src = e.target.src;\n  })\n}\n\nconst options = document.getElementsByClassName('optionImg')\n\nfor (let i = 0; i < options.length; i++) {\n  options[i].onclick = selectImage\n}\n\ndocument.getElementById('slowSpeed').onclick = () => speed = 0.5\ndocument.getElementById('fastSpeed').onclick = () => speed = 1\n\noptions[0].click()"]}