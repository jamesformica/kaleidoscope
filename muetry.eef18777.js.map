{"version":3,"sources":["muetry.js"],"names":["rad","deg","Math","PI","random","min","max","floor","RADIUS","SLICE_ANGLE","SLICE_OPPOSITE_ANGLE","SLICE_HEIGHT","sin","patternCanvas","document","getElementById","patternCtx","getContext","width","height","invPatternCanvas","invPatternCtx","kCanvas","kCtx","img","Image","src","onload","kaleidoscopeGo","drawWedge","x","y","save","beginPath","moveTo","circlStart","circleStop","arc","clip","drawImage","restore","drawInverseWedge","translate","scale","drawWheel","i","rotate","lineWidth","strokeStyle","stroke","clearCanvases","clearRect","getQueryPoint1","query","Number","get","getQueryPoint2","URLSearchParams","location","search","points","counter","point","loop","distanceX","distanceY","length","sqrt","round","window","requestAnimationFrame"],"mappings":"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","file":"muetry.eef18777.js","sourceRoot":"..","sourcesContent":["/** PHASE 1 - Setup **/\n\n/**\n * I like working in degrees. 0 - 360. It's nice and human. Canvas likes\n * working in radians. Whatever the f*** they are. This converts degress\n * to radians using math found on stack overflow #noshame\n */\nconst rad = (deg) => (deg * Math.PI) / 180;\n\n/**\n * This function will come in handy later when we want to pick random points\n * on an image. It returns a whole number between the min and max provided\n */\nconst random = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\n// This will be the radius of our kaleidoscope. Meaning the diameter will be double this #quickmaths\nconst RADIUS = 300;\n\n// Think of this as the \"size of pacman's mouth\"\nconst SLICE_ANGLE = 30;\n\n// Essentially we need to know the height of \"pacman's mouth\" (see dia. 1)\nconst SLICE_OPPOSITE_ANGLE = (180 - SLICE_ANGLE) / 2;\nconst SLICE_HEIGHT = RADIUS / (2 * Math.sin(rad(SLICE_OPPOSITE_ANGLE)));\n\n/**\n * This preps each of the canvases we are going to use. All up there are 3\n * canvases. The first draws a wedge, the second inverts that wedge, and the third\n * draws and animates the full kaleidoscope\n */\n\n// canvas 1 - wedge pattern - size of the area around pacman's mouth\nconst patternCanvas = document.getElementById(\"pattern\");\nconst patternCtx = patternCanvas.getContext(\"2d\");\npatternCanvas.width = RADIUS;\npatternCanvas.height = SLICE_HEIGHT;\n\n// canvas 2 - inverted wedge pattern - size of the above canvas\nconst invPatternCanvas = document.getElementById(\"invPattern\");\nconst invPatternCtx = invPatternCanvas.getContext(\"2d\");\ninvPatternCanvas.width = patternCanvas.width;\ninvPatternCanvas.height = patternCanvas.height;\n\n// canvas 3 - kaleidoscope - size of full circle\nconst kCanvas = document.getElementById(\"kaleidoscope\");\nconst kCtx = kCanvas.getContext(\"2d\");\nkCanvas.width = RADIUS * 2;\nkCanvas.height = RADIUS * 2;\n\n/** PHASE 2 - Loading the image **/\n\n/**\n * This second simply loads the image into memory then calls a function\n * once it's ready to go\n */\nconst img = new Image();\nimg.src = document.getElementById(\"image\").src;\nimg.onload = () => {\n  kaleidoscopeGo(img);\n};\n\n/** PHASE 3 - Drawing a wedge **/\n\n/**\n * Okay, this is the first tricky bit. We are essentially drawing a section of\n * a circle, then filling it in with the image. Think of this section as filling in\n * pacman's mouth. See dia. 2 for a visual representation of what we are doing here.\n * The red line is the shape we are drawing, the blue box is the canvas we are drawing\n * on, and the circle is the size of the circle we are drawing.\n */\nconst drawWedge = (x, y, img) => {\n  patternCtx.save();\n\n  patternCtx.beginPath();\n  patternCtx.moveTo(0, SLICE_HEIGHT / 2);\n\n  const circlStart = rad(SLICE_ANGLE / -2) - 0.02;\n  const circleStop = rad(SLICE_ANGLE  / 2) + 0.02;\n  patternCtx.arc(0, SLICE_HEIGHT / 2, RADIUS, circlStart, circleStop);\n\n  // clip the current shape so the image fills inside it\n  patternCtx.clip();\n  // fill it with whatever is in the image at that x and y coord\n  patternCtx.drawImage(\n    img,\n    x,\n    y,\n    RADIUS,\n    SLICE_HEIGHT,\n    0,\n    0,\n    RADIUS,\n    SLICE_HEIGHT\n  );\n\n  patternCtx.restore();\n};\n\n/** PHASE 4 - Drawing an inverted wedge **/\n\n/**\n * When we draw the kaleidoscope, each alternative slice of the circle is an\n * inverted version. We'll use a second canvas to invert the wedge we just drew\n */\nconst drawInverseWedge = () => {\n  invPatternCtx.save();\n  invPatternCtx.translate(0, SLICE_HEIGHT); // go to bottom left corner\n  invPatternCtx.scale(1, -1); // flip the canvas vertically\n  invPatternCtx.drawImage(patternCanvas, 0, 0); // draw the pattern canvas\n  invPatternCtx.restore();\n};\n\n/** PHASE 5 - Drawing the full wheel **/\n\n/**\n * With both the normal and inverted wedge drawn we can now fill in the full circle.\n * We go to the middle of the circle, then rotate, draw the normal wedge, rotate again,\n * draw the inverted wedge, and so on until the circle is full. See dia. 3\n */\nconst drawWheel = () => {\n  kCtx.save();\n  kCtx.beginPath()\n  kCtx.translate(RADIUS, RADIUS); // go to middle\n\n  for (let i = 0; i <= 360 / SLICE_ANGLE; i += 1) {\n    kCtx.rotate(rad(SLICE_ANGLE));\n    kCtx.drawImage(\n      i % 2 ? patternCanvas : invPatternCanvas,\n      0,\n      SLICE_HEIGHT / -2\n    );\n  }\n\n\n  kCtx.arc(0, 0, RADIUS - 2, rad(0), rad(360));\n  kCtx.lineWidth = 2;\n  kCtx.strokeStyle = \"black\";\n  kCtx.stroke();\n\n  kCtx.restore();\n};\n\n/** PHASE 6 - Animation helpers **/\n\n/* Before each loop we need to wipe clean the canvases and start fresh */\nconst clearCanvases = () => {\n  patternCtx.clearRect(0, 0, patternCanvas.width, patternCanvas.height);\n  invPatternCtx.clearRect(\n    0,\n    0,\n    invPatternCanvas.width,\n    invPatternCanvas.height\n  );\n  kCtx.clearRect(0, 0, kCanvas.width, kCanvas.height);\n};\n\nconst getQueryPoint1 = (query) => ({\n  x: Number(query.get(\"x1\")),\n  y: Number(query.get(\"y1\")),\n});\n\nconst getQueryPoint2 = (query) => ({\n  x: Number(query.get(\"x2\")),\n  y: Number(query.get(\"y2\")),\n});\n\n/** PHASE 7 - Animation loop **/\n\n/**\n * This is it folks. Here we pick a point and incrementally move towards it\n * each loop. Once we arrive we simply pick a new point and off we go again.\n * See dia. 5 for a visual representation of what is happening\n */\nconst kaleidoscopeGo = (img) => {\n  const query = new URLSearchParams(location.search);\n  const points = [getQueryPoint1(query), getQueryPoint2(query)];\n\n  let counter = 0;\n  let point = points[counter];\n  let x = point.x;\n  let y = point.y;\n\n  const loop = () => {\n    clearCanvases(); // wipe clean the canvases\n    drawWedge(x, y, img); // draw the normal wedge\n    drawInverseWedge(); // draw the inverted wedge\n    drawWheel(); // draw the full circle\n\n    const distanceX = point.x - x; // figure out how far away we are from\n    const distanceY = point.y - y; // the target point\n\n    if (distanceX === 0 && distanceY === 0) {\n      counter = (counter + 1) % points.length;\n      point = points[counter];\n    } else {\n      const length = Math.sqrt(distanceY * distanceY + distanceX * distanceX);\n      x = Math.round(x + distanceX / length); // options: -1, 0, 1 in x direction\n      y = Math.round(y + distanceY / length); // options: -1, 0, 1 in y direction\n    }\n\n    window.requestAnimationFrame(loop); // trigger the loop again\n  };\n\n  window.requestAnimationFrame(loop);\n};\n"]}